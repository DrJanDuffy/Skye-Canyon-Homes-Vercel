# .cursorrules - Real Estate Website Build Instructions

## Project Overview
Build a high-performance, SEO-optimized real estate website for Dr. Jan Duffy, Las Vegas Real Estate Expert. The site must rank well on Google and provide excellent user experience.

## Tech Stack (REQUIRED)
- **Framework**: Next.js 15 (App Router)
- **Language**: TypeScript (strict mode enabled)
- **Styling**: Tailwind CSS
- **Database**: PostgreSQL with Prisma ORM
- **Deployment**: Vercel
- **Analytics**: Google Analytics 4 + Google Search Console integration
- **CMS**: Sanity.io or Contentful for blog/property listings

## Core Principles
1. **SEO-First**: Every page must be fully server-side rendered with complete metadata
2. **Performance**: Target Core Web Vitals - LCP < 2.5s, FID < 100ms, CLS < 0.1
3. **Mobile-First**: Design for mobile, scale up to desktop
4. **Accessibility**: WCAG 2.1 AA compliance minimum
5. **Speed**: Optimize everything - images, fonts, scripts

## Code Style Requirements

### TypeScript Rules
- Use TypeScript for ALL code
- Enable strict mode in tsconfig.json
- Prefer interfaces over types
- Avoid using `any` - use `unknown` if type is uncertain
- Use proper type annotations for all functions
- Use functional programming patterns, avoid classes

### Component Structure
```typescript
interface ComponentProps {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export default function Component({ title, description, children }: ComponentProps) {
  return (
    <div className="component-wrapper">
      <h1>{title}</h1>
      {description && <p>{description}</p>}
      {children}
    </div>
  );
}
```

## Project Context
This is a comprehensive real estate website for Dr. Jan Duffy, specializing in Skye Canyon Las Vegas properties (89166). The site features property listings, home valuations, market analysis, and lead generation.

## Legacy Tech Stack (Current)
- Frontend: React 18 + TypeScript + Vite
- Backend: Express + TypeScript + PostgreSQL
- UI: Tailwind CSS + Shadcn/ui components
- Database: Drizzle ORM with PostgreSQL
- Integrations: RealScout MLS, Homebot valuations, Google Analytics

## Code Standards

### TypeScript
- Use strict TypeScript for all new code
- Define interfaces for all props and API responses
- Use proper type exports from shared/schema.ts
- Avoid any types - prefer proper typing

### React Components
- Use functional components with hooks
- Export default for main component, named exports for utilities
- Props should be properly typed interfaces
- Use React.memo for performance optimization where needed

### File Structure
```
client/src/
├── components/ - Reusable UI components
├── pages/ - Route components
├── lib/ - Utility functions and configurations
├── hooks/ - Custom React hooks
server/
├── routes.ts - API endpoints
├── storage.ts - Database operations
├── middleware.ts - Express middleware
shared/
├── schema.ts - Database schema and types
```

### Naming Conventions
- Components: PascalCase (PropertyCard.tsx)
- Files: kebab-case for utilities, PascalCase for components
- Variables: camelCase
- Constants: UPPER_SNAKE_CASE
- CSS classes: Tailwind utilities

## Business Logic

### Property Search
- All property search buttons link to RealScout onboarding: http://drjanduffy.realscout.com/onboarding
- Use target="_blank" and rel="noopener noreferrer" for external links

### Home Valuations
- Replace all "Get Home Value" buttons with Homebot widgets
- Use unique widget IDs: homebot_homeowner, homebot_homeowner_1, etc.
- Widget code: Homebot('#widget_id', '35de8cf0a487cf0fec06278f2023805ea02eba0b58960a43')

### Contact Information
- Phone: (702) 500-1902
- Email: DrDuffy@SkyeCanyonHomesForSale.com
- Address: 10111 W. Skye Canyon Park Drive, Las Vegas, NV 89166
- Use tel: protocol for phone links

### SEO Requirements
- Include "Skye Canyon", "Las Vegas", "Nevada", "89166" in headings
- H1 tags should be geo-specific
- Meta descriptions under 160 characters
- Canonical URLs for all pages

## Database Schema
Use types from shared/schema.ts:
- User, InsertUser
- Property, InsertProperty
- Lead, InsertLead
- MarketStats, InsertMarketStats

## API Patterns
- Use storage interface methods, not direct database calls
- Validate input with Zod schemas from drizzle-zod
- Return proper HTTP status codes
- Handle errors gracefully with try/catch

## Styling Guidelines
- Use Tailwind CSS utilities, avoid custom CSS
- Use Shadcn/ui components: Button, Card, Input, etc.
- Responsive design: mobile-first approach
- Color scheme: realscout-blue, realscout-light, realscout-navy

## External Integrations

### RealScout Widgets
```html
<realscout-search 
  agent-encoded-id="QWdlbnQtMjI1MDUw"
  search-type="buy"
  location="Skye Canyon, Las Vegas, NV"
  data-production="true">
</realscout-search>
```

### Homebot Widgets
```javascript
(function (h,b) { 
  var w = window, d = document, s = 'script', x, y; 
  w['__hb_namespace'] = h; 
  w[h] = w[h] || function () { (w[h].q=w[h].q||[]).push(arguments) }; 
  y = d.createElement(s); 
  x = d.getElementsByTagName(s)[0]; 
  y.async = 1; 
  y.src = b; 
  x.parentNode.insertBefore(y,x) 
})('Homebot','https://embed.homebotapp.com/lgw/v1/widget.js'); 
Homebot('#homebot_homeowner', '35de8cf0a487cf0fec06278f2023805ea02eba0b58960a43')
```

## Performance
- Use React.lazy for code splitting on routes
- Implement proper loading states
- Optimize images with proper alt text
- Use semantic HTML for accessibility

## Security
- Validate all user inputs
- Use environment variables for sensitive data
- Implement rate limiting on API endpoints
- Sanitize data before database operations

## Common Patterns

### Page Component Structure
```typescript
export default function PageName() {
  return (
    <>
      <Helmet>
        <title>Page Title | Dr. Jan Duffy REALTOR®</title>
        <meta name="description" content="..." />
      </Helmet>
      <div className="min-h-screen bg-gray-50">
        <Navigation />
        <main>
          {/* Page content */}
        </main>
        <Footer />
        <BackToTop />
      </div>
    </>
  );
}
```

### API Route Pattern
```typescript
app.get('/api/endpoint', async (req, res) => {
  try {
    const result = await storage.getMethod();
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});
```

## Next.js 15 App Router Requirements

### File Structure
```
app/
├── (marketing)/
│   ├── page.tsx          # Homepage
│   ├── about/
│   │   └── page.tsx
│   ├── contact/
│   │   └── page.tsx
│   └── layout.tsx
├── (dashboard)/
│   ├── admin/
│   │   └── page.tsx
│   └── layout.tsx
├── api/
│   ├── properties/
│   │   └── route.ts
│   └── leads/
│       └── route.ts
├── globals.css
├── layout.tsx            # Root layout
└── page.tsx              # Root page
```

### SEO Requirements
- Use `generateMetadata()` for dynamic metadata
- Implement structured data (JSON-LD)
- Use `next/image` for all images
- Implement proper canonical URLs
- Use `next/font` for font optimization

### Performance Requirements
- Use `next/dynamic` for code splitting
- Implement proper loading states
- Use `Suspense` boundaries
- Optimize images with proper alt text
- Use `next/link` for internal navigation

### Database Schema (Prisma)
```prisma
model Property {
  id          String   @id @default(cuid())
  address     String
  price       Decimal
  bedrooms    Int
  bathrooms   Int
  sqft        Int
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lead {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  message     String?
  createdAt   DateTime @default(now())
}
```

## Migration Strategy
1. **Phase 1**: Keep current Vite + React setup running
2. **Phase 2**: Create new Next.js 15 project in parallel
3. **Phase 3**: Migrate components one by one
4. **Phase 4**: Set up Prisma database
5. **Phase 5**: Deploy Next.js version and switch DNS

## Debugging
- Use console.log sparingly, prefer proper error handling
- Check network requests in browser dev tools
- Verify environment variables are set correctly
- Test responsive design on multiple screen sizes
- Use Next.js built-in performance monitoring